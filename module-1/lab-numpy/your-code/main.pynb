{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.16.2\n",
      "[[[[0.74796893 0.46277321 0.55820527 0.07961602 0.82552899]\n",
      "   [0.6771538  0.82903152 0.79998217 0.5219576  0.4549625 ]\n",
      "   [0.72640765 0.7871367  0.21210949 0.30379528 0.32520401]]\n",
      "\n",
      "  [[0.40790359 0.18937368 0.4239048  0.07338663 0.40713836]\n",
      "   [0.78303925 0.74648906 0.0708185  0.54443848 0.78791613]\n",
      "   [0.56905234 0.38529375 0.98943791 0.07623437 0.80869281]]\n",
      "\n",
      "  [[0.64300321 0.06766254 0.68082706 0.53521556 0.86897609]\n",
      "   [0.4887004  0.78705588 0.11072429 0.74095674 0.345719  ]\n",
      "   [0.51683499 0.1323537  0.88003305 0.52245247 0.00727207]]]\n",
      "\n",
      "\n",
      " [[[0.39546276 0.56988136 0.137138   0.05039657 0.41760544]\n",
      "   [0.56948485 0.76408944 0.31234414 0.90141349 0.68219656]\n",
      "   [0.56738049 0.45395085 0.09113971 0.09293069 0.29552708]]\n",
      "\n",
      "  [[0.092487   0.86306651 0.21677448 0.8017536  0.96845379]\n",
      "   [0.26622374 0.59081069 0.71414621 0.28934283 0.59864686]\n",
      "   [0.47929985 0.6659911  0.17528853 0.76014323 0.31665758]]\n",
      "\n",
      "  [[0.84151105 0.69853732 0.73347362 0.89743027 0.81673339]\n",
      "   [0.17460231 0.31125664 0.3778225  0.54947425 0.56973242]\n",
      "   [0.87366688 0.40701649 0.71304637 0.8603902  0.82882767]]]]\n"
     ]
    }
   ],
   "source": [
    "#1. Import the NUMPY package under the name np.\n",
    "import numpy as np\n",
    "\n",
    "#2. Print the NUMPY version and the configuration.\n",
    "#print(np.__version__)\n",
    "print(np.version.version)\n",
    "\n",
    "#3. Generate a 2x3x5 3-dimensional array with random values. Assign the array to variable \"a\"\n",
    "# Challenge: there are at least three easy ways that use numpy to generate random arrays. How many ways can you find?\n",
    "a=np.random.random((2,3,3,5))\n",
    "\n",
    "#4. Print a.\n",
    "print(a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]]\n"
     ]
    }
   ],
   "source": [
    "#5. Create a 5x2x3 3-dimensional array with all values equaling 1.\n",
    "#Assign the array to variable \"b\"\n",
    "b = np.full((5,2,3), 3)\n",
    "b.fill(1)\n",
    "\n",
    "#6. Print b.\n",
    "print(b)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 1 1]\n",
      " [1 1 1]]\n"
     ]
    }
   ],
   "source": [
    "v = 1\n",
    "rows = 2\n",
    "cols = 3\n",
    "y = np.tile(v, (rows,cols))\n",
    "print(y) #try2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]]\n"
     ]
    }
   ],
   "source": [
    "array = np.arange(30).reshape(5,2,3)\n",
    "array.fill(1)\n",
    "print(array) #try3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "30\n"
     ]
    }
   ],
   "source": [
    "#7. Do a and b have the same size? How do you prove that in Python code?\n",
    "print(np.size(a))\n",
    "print(np.size(b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#8. Are you able to add a and b? Why or why not?\n",
    "sumnp=np.add(a,b) #error as not the same structure of the shape\n",
    "\n",
    "#9. Transpose b so that it has the same structure of a (i.e. become a 2x3x5 array). Assign the transposed array to varialbe \"c\".\n",
    "\n",
    "c=np.transpose(b)\n",
    "\n",
    "#10. Try to add a and c. Now it should work. Assign the sum to varialbe \"d\". But why does it work now?\n",
    "d=np.add(a,c)\n",
    "\n",
    "\n",
    "#11. Print a and d. Notice the difference and relation of the two array in terms of the values? Explain.\n",
    "print(a)\n",
    "print(d)\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
